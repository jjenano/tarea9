/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var GramaticaLup = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,10],$V1=[5,13],$V2=[1,28],$V3=[1,27],$V4=[13,22],$V5=[1,37],$V6=[1,38],$V7=[1,39],$V8=[1,46],$V9=[1,118],$Va=[1,142],$Vb=[1,176],$Vc=[1,179],$Vd=[1,228];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"s":3,"instrucciones":4,"EOF":5,"instruccion":6,"instruccion_login":7,"instruccion_logout":8,"instruccion_data":9,"instruccion_message":10,"instruccion_error":11,"instruccion_arbol":12,"[":13,"+":14,"login":15,"]":16,"instruccion_respuesta":17,"-":18,"logout":19,"data":20,"message":21,"cadena":22,"rline":23,"rcolumn":24,"type":25,"desc":26,"success":27,"fail":28,"databases":29,"lista_db":30,"db":31,"database":32,"name":33,"tables":34,"lista_tables":35,"types":36,"lista_types":37,"procedures":38,"lista_procedures":39,"instruccion_table":40,"table":41,"columns":42,"lista_columns":43,"instruccion_column":44,"instruccion_type":45,"attributes":46,"lista_atributes":47,"instruccion_atribute":48,"attribute":49,"instruccion_procedure":50,"procedure":51,"rerror":52,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",13:"[",14:"+",15:"login",16:"]",18:"-",19:"logout",20:"data",21:"message",22:"cadena",23:"rline",24:"rcolumn",25:"type",26:"desc",27:"success",28:"fail",29:"databases",32:"database",33:"name",34:"tables",36:"types",38:"procedures",41:"table",42:"columns",46:"attributes",49:"attribute",51:"procedure",52:"rerror"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[7,9],[8,9],[9,9],[10,9],[17,1],[17,9],[17,9],[17,9],[17,9],[17,3],[17,3],[12,9],[30,2],[30,1],[31,44],[35,2],[35,1],[40,26],[40,8],[43,2],[43,1],[44,9],[44,8],[37,2],[37,1],[45,26],[45,8],[47,2],[47,1],[48,9],[48,8],[39,2],[39,1],[50,9],[50,8],[11,12]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

		// cuado se haya reconocido la entrada completa retornamos el AST
		return $$[$0-1];
	
break;
case 2: case 22: case 25: case 29: case 33: case 37: case 41:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 3: case 23: case 26: case 30: case 34: case 38: case 42:
 this.$ = [$$[$0]]; 
break;
case 4: case 5: case 6: case 7: case 8: case 9: case 14:
this.$ = $$[$0];
break;
case 10: case 11: case 15: case 16: case 17: case 18: case 31: case 39: case 43:
this.$ = $$[$0-4];
break;
case 12:

        var auxval = {
            data: $$[$0-4]
        }
        this.$ = auxval;
    
break;
case 13:

        var auxval = {
            menssage: $$[$0-4]
        }
        this.$ = auxval;
    
break;
case 19: case 20:
this.$ = $$[$0-1];
break;
case 21:

        var auxval = {
            listadb: $$[$0-4]
        }
        this.$ = auxval;
    
break;
case 24:

        var auxval = {
            name: $$[$0-35],
            tables: $$[$0-26],
            types: $$[$0-17],
            procedures: $$[$0-8]
        }
        this.$ = auxval;
    
break;
case 27:

        var auxval = {
            name: $$[$0-17],
            columns: $$[$0-8]
        }
        this.$ = auxval;
    
break;
case 28: case 36:

        this.$ = null;
    
break;
case 32: case 40: case 44:
this.$ = null;
break;
case 35:

        var auxval = {
            name: $$[$0-17],
            attributes: $$[$0-8]
        }
        this.$ = auxval;
    
break;
case 45:

        var auxval = {
            line: $$[$0-7],
            column: $$[$0-6],
            type: $$[$0-5],
            desc: $$[$0-4]
        }
        this.$ = auxval;
    
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:$V0},{1:[3]},{5:[1,11],6:12,7:4,8:5,9:6,10:7,11:8,12:9,13:$V0},o($V1,[2,3]),o($V1,[2,4]),o($V1,[2,5]),o($V1,[2,6]),o($V1,[2,7]),o($V1,[2,8]),o($V1,[2,9]),{14:[1,13]},{1:[2,1]},o($V1,[2,2]),{15:[1,14],19:[1,15],20:[1,16],21:[1,17],29:[1,19],52:[1,18]},{16:[1,20]},{16:[1,21]},{16:[1,22]},{16:[1,23]},{16:[1,24]},{16:[1,25]},{13:$V2,17:26,22:$V3},{13:$V2,17:29,22:$V3},{13:$V2,17:30,22:$V3},{13:$V2,17:31,22:$V3},{13:$V2,17:32,22:$V3},{13:[1,35],30:33,31:34},{13:[1,36]},o($V4,[2,14]),{14:$V5,27:$V6,28:$V7},{13:[1,40]},{13:[1,41]},{13:[1,42]},{13:$V2,17:43,22:$V3},{13:[1,44],31:45},{13:[2,23]},{14:$V8},{18:[1,47]},{23:[1,48],24:[1,49],25:[1,50],26:[1,51]},{16:[1,52]},{16:[1,53]},{18:[1,54]},{18:[1,55]},{18:[1,56]},{13:$V2,17:57,22:$V3},{14:$V8,18:[1,58]},{13:[2,22]},{32:[1,59]},{15:[1,60]},{16:[1,61]},{16:[1,62]},{16:[1,63]},{16:[1,64]},o($V4,[2,19]),o($V4,[2,20]),{19:[1,65]},{20:[1,66]},{21:[1,67]},{13:$V2,17:68,22:$V3},{29:[1,69]},{16:[1,70]},{16:[1,71]},{22:[1,72]},{22:[1,73]},{22:[1,74]},{22:[1,75]},{16:[1,76]},{16:[1,77]},{16:[1,78]},{13:[1,79]},{16:[1,80]},{13:[1,81]},o($V1,[2,10]),{13:[1,82]},{13:[1,83]},{13:[1,84]},{13:[1,85]},o($V1,[2,11]),o($V1,[2,12]),o($V1,[2,13]),{18:[1,86]},o($V1,[2,21]),{14:[1,87]},{18:[1,88]},{18:[1,89]},{18:[1,90]},{18:[1,91]},{52:[1,92]},{33:[1,93]},{23:[1,94]},{24:[1,95]},{25:[1,96]},{26:[1,97]},{16:[1,98]},{16:[1,99]},{16:[1,100]},{16:[1,101]},{16:[1,102]},{16:[1,103]},o($V1,[2,45]),{13:$V2,17:104,22:$V3},o($V4,[2,15]),o($V4,[2,16]),o($V4,[2,17]),o($V4,[2,18]),{13:[1,105]},{18:[1,106]},{33:[1,107]},{16:[1,108]},{13:[1,109]},{14:[1,110]},{34:[1,111]},{16:[1,112]},{13:[1,115],35:113,40:114},{13:[1,116],40:117},{13:[2,26]},{14:$V9},{14:$V9,18:[1,119]},{13:[2,25]},{41:[1,120]},{34:[1,121]},{16:[1,122]},{16:[1,123]},{13:[1,124]},{13:[1,125]},{14:[1,126],18:[1,127]},{14:[1,128]},{33:[1,129]},{41:[1,130]},{36:[1,131]},{16:[1,132]},{16:[1,133]},{16:[1,134]},{13:$V2,17:135,22:$V3},{13:[2,28]},{13:[1,138],37:136,45:137},{13:[1,139]},{13:[1,140],45:141},{13:[2,34]},{14:$Va},{18:[1,143]},{14:$Va,18:[1,144]},{13:[2,33]},{25:[1,145]},{33:[1,146]},{36:[1,147]},{16:[1,148]},{16:[1,149]},{16:[1,150]},{13:[1,151]},{13:[1,152]},{13:[1,153]},{14:[1,154],18:[1,155]},{14:[1,156]},{14:[1,157]},{33:[1,158]},{25:[1,159]},{42:[1,160]},{38:[1,161]},{16:[1,162]},{16:[1,163]},{16:[1,164]},{16:[1,165]},{13:$V2,17:166,22:$V3},{13:[2,36]},{13:[1,169],43:167,44:168},{13:[1,172],39:170,50:171},{13:[1,173]},{13:[1,174],44:175},{13:[2,30]},{14:$Vb},{13:[1,177],50:178},{13:[2,42]},{14:$Vc},{18:[1,180]},{14:$Vb,18:[1,181]},{13:[2,29]},{24:[1,182]},{14:$Vc,18:[1,183]},{13:[2,41]},{51:[1,184]},{33:[1,185]},{42:[1,186]},{16:[1,187]},{38:[1,188]},{16:[1,189]},{16:[1,190]},{16:[1,191]},{13:[1,193],17:192,22:$V3},{16:[1,194]},{13:[1,196],17:195,22:$V3},{13:[1,197]},{13:[1,198]},{13:[1,199]},{14:$V5,18:[1,200],27:$V6,28:$V7},{13:[1,201]},{13:[1,202]},{14:$V5,18:[1,203],27:$V6,28:$V7},{14:[1,204]},{18:[1,205]},{18:[1,206]},{24:[1,207]},{18:[1,208]},{18:[1,209]},{51:[1,210]},{46:[1,211]},{41:[1,212]},{24:[1,213]},{16:[1,214]},{32:[1,215]},{51:[1,216]},{16:[1,217]},{16:[1,218]},{16:[1,219]},{16:[1,220]},{13:[2,32]},{16:[1,221]},{16:[1,222]},{13:[2,44]},{13:[1,225],47:223,48:224},{13:[2,27]},{13:[2,31]},{13:[2,24]},{13:[2,43]},{13:[1,226],48:227},{13:[2,38]},{14:$Vd},{14:$Vd,18:[1,229]},{13:[2,37]},{49:[1,230]},{46:[1,231]},{16:[1,232]},{16:[1,233]},{13:[1,235],17:234,22:$V3},{13:[1,236]},{13:[1,237]},{14:$V5,18:[1,238],27:$V6,28:$V7},{18:[1,239]},{18:[1,240]},{49:[1,241]},{25:[1,242]},{49:[1,243]},{16:[1,244]},{16:[1,245]},{16:[1,246]},{13:[2,40]},{13:[2,35]},{13:[2,39]}],
defaultActions: {11:[2,1],34:[2,23],45:[2,22],114:[2,26],117:[2,25],133:[2,28],137:[2,34],141:[2,33],163:[2,36],168:[2,30],171:[2,42],175:[2,29],178:[2,41],214:[2,32],217:[2,44],219:[2,27],220:[2,31],221:[2,24],222:[2,43],224:[2,38],227:[2,37],244:[2,40],245:[2,35],246:[2,39]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* Nada para los espacios en blanco. */
break;
case 1:return 13
break;
case 2:return 16
break;
case 3:return 14
break;
case 4:return 18
break;
case 5:return 15
break;
case 6:return 28
break;
case 7:return 27
break;
case 8:return 19
break;
case 9:return 20
break;
case 10:return 21
break;
case 11:return 52
break;
case 12:return 23
break;
case 13:return 26
break;
case 14:return 29
break;
case 15:return 32
break;
case 16:return 33
break;
case 17:return 34
break;
case 18:return 41
break;
case 19:return 42
break;
case 20:return 24
break;
case 21:return 36
break;
case 22:return 25
break;
case 23:return 46
break;
case 24:return 49
break;
case 25:return 38
break;
case 26:return 51
break;
case 27:return 21
break;
case 28:return 22
break;
case 29:return '.'
break;
case 30:return 5
break;
case 31:
									//var con = require('../DynamoDB/conexion.js');
									//var inflaksdfña = new con["default"]();
									//var jeje = inflaksdfña.insertLexico(yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column);
								
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\+)/i,/^(?:-)/i,/^(?:login\b)/i,/^(?:fail\b)/i,/^(?:success\b)/i,/^(?:logout\b)/i,/^(?:data\b)/i,/^(?:message\b)/i,/^(?:error\b)/i,/^(?:line\b)/i,/^(?:desc\b)/i,/^(?:databases\b)/i,/^(?:database\b)/i,/^(?:name\b)/i,/^(?:tables\b)/i,/^(?:table\b)/i,/^(?:columns\b)/i,/^(?:column\b)/i,/^(?:types\b)/i,/^(?:type\b)/i,/^(?:attributes\b)/i,/^(?:attribute\b)/i,/^(?:procedures\b)/i,/^(?:procedure\b)/i,/^(?:message\b)/i,/^(?:([^\[]|[ \n\r\t])*([^[-]))/i,/^(?:\.)/i,/^(?:$)/i,/^(?:.{1,10})/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = GramaticaLup;
exports.Parser = GramaticaLup.Parser;
exports.parse = function () { return GramaticaLup.parse.apply(GramaticaLup, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}